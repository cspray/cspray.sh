#!/bin/bash

source ./functions.sh

echo "Configuring GPG key."

if [ -d "$HOME/.gnupg" ]; then
  echo -e "\tExisting GPG keys found. Will not migrate existing key!"
else
  if [ ! -f "/run/media/$USER/Secure_Key/pass_key_priv.gpg" ] || [ ! -f "/run/media/$USER/Secure_Key/pass_key_pub.gpg" ]; then
    echo -en "\tExpected to find GPG key for password-store available in /run/media/$USER/Secure_Key but nothing was found. "
    echo -e "Please ensure that the appropriate encrypted USB key has been mounted to the correct path."
  else
    echo "Importing existing GPG key from Secure Key."
    gpg --import "/run/media/$USER/Secure_Key/pass_key_pub.gpg"
    gpg --allow-secret-key-import --import "/run/media/$USER/Secure_Key/pass_key_priv.gpg"
  fi
fi

echo "Configuring SSH key... "

if [ -f "$HOME/.ssh/id_ed25519" ]; then
  print_success_mark
  echo -e "\tExisting SSH key found, will not create new key!"
else
  # Make sure we print a new line so we don't output next to the Configuring SSH Key
  echo
  echo -n "Please enter a password for your new SSH key: "
  read -rs password
  echo
  echo -n "Confirm password for SSH key: "
  read -rs confirm_password
  if [[ $password == "$confirm_password" ]]; then
    ssh-keygen -t ed25519 -f "$HOME/.ssh/id_ed25519" -C "me@cspray.io" -N "$password"
    print_success_mark
  else
    print_failure_mark
  fi
fi
