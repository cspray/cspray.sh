#!/bin/bash

source ./functions.sh

echo -n "Setting global .gitignore... "
if [[ -f $HOME/.gitignore ]]; then
  print_success_mark
  echo -e "\tGlobal gitignore file already exists. Will not modify!"
else
  touch "$HOME/.gitignore"
  {
    echo '.'
    echo '..'
    echo '.idea'
  } >> "$HOME/.gitignore"
  git config --global core.excludesfile "$HOME/.gitignore"
  print_success_mark
fi

echo -n "Configuring global git user name... "
git config --global user.name "Charles Sprayberry"
print_success_mark

if [[ -f /run/media/$USER/Secure_Key/github_token.txt ]]; then
  echo -n "Setting up SSH key on GitHub... "
  github_token=$(<"/run/media/$USER/Secure_Key/github_token.txt")
  ssh_keys=$(curl --silent \
    -H "Authorization: token $github_token" \
    -H "Accept: application/vnd.github.v3+json" \
    https://api.github.com/user/keys)
  stored_key_titles=$(echo "$ssh_keys" | jq -r ".[] | .title")
  hostname=$(</etc/hostname)
  is_stored=0
  for stored_key_title in ${stored_key_titles[*]}; do
    if [[ $hostname == "$stored_key_title" ]]; then
      is_stored=1
    fi
  done

  if [[ $is_stored == 1 ]]; then
    print_success_mark
    echo -e "\tA key for \"$hostname\" is already present on GitHub. Please manually validate this key."
  else
    ssh_key=$(<"$HOME/.ssh/id_ed25519.pub")
    curl --silent \
      -X POST \
      -H "Authorization: token $github_token" \
      -H "Accept: application/vnd.github.v3+json" \
      -d "{\"title\": \"$hostname\", \"key\": \"$ssh_key\"}" \
      https://api.github.com/user/keys &> /dev/null
    print_success_mark
  fi
else
  echo ""
  echo -e "\e[33mCould not find credentials necessary to communicate with GitHub! You will need to ensure the SSH key for this "
  echo "host has been properly configured in GitHub. The appropriate SSH key has been copied into your clipboard. Press "
  echo -e "Enter when SSH has been configured.\e[0m"
  echo ""
  echo -n "GitHub SSH key manually configured... "

  xclip -selection clipboard < "$HOME/.ssh/id_ed25519.pub"

  read -r CONTINUE
  echo -ne "\033[1A"
  echo -ne "\033[38C"
  print_success_mark

  printf '' | xclip -selection clipboard
fi

exit_code=0
if [[ -f ./repos.sh ]]; then
  source "./repos.sh"

  echo "Starting ssh-agent to clone git repos... "

  eval "$(ssh-agent -s)"
  ssh-add -q "$HOME/.ssh/id_ed25519"

  echo -ne "\033[2A"
  echo -ne "\033[J"
  echo -ne "\033[1A"
  echo -ne "\033[41C"
  print_success_mark

  for repo in "${clone_repos[@]}"; do
    IFS='/' read -ra org_repo <<< "$repo"
    org="${org_repo[0]}"
    gh_repo="${org_repo[1]}"
    if [ ! -d "$HOME/Documents/dev-work/$org" ]; then
      mkdir -p "$HOME/Documents/dev-work/$org"
    fi

    echo -n "Cloning $org/$gh_repo... "
    if [ -d "$HOME/Documents/dev-work/$org/$gh_repo" ]; then
      print_success_mark
      echo -e "\t$HOME/Documents/dev-work/$org/$gh_repo already exists. The repository will not be cloned."
    else
      if ! git clone -q "git@github.com:$org/$gh_repo" "$HOME/Documents/dev-work/$org/$gh_repo" &> /dev/null; then
        print_failure_mark
        echo -e "\tUnable to clone $org/$gh_repo. Please ensure appropriate SSH key has been configured."
        exit_code=255
      else
        print_success_mark
        org_email=${org_email_map[$org]}
        echo -n "Setting email address for $org/$gh_repo to $org_email... "
        (cd "$HOME/Documents/dev-work/$org/$gh_repo" && git config user.email "$org_email")
        print_success_mark
      fi
    fi
  done

  echo "Ending ssh-agent... "
  eval "$(ssh-agent -k)"
  echo -ne "\033[1A"
  echo -ne "\033[J"
  echo -ne "\033[1A"
  echo -ne "\033[20C"
  print_success_mark

  exit $exit_code
fi
